generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int        @id @default(autoincrement())
  name            String     @db.VarChar(255)
  email           String     @unique
  phone           String     @unique
  occupation      String
  otherOccupation String?
  password        String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  reviews         Review[]
  favorites       Business[] @relation("UserFavorites")
}

model Business {
  id            Int       @id @default(autoincrement())
  ownerName     String?
  email         String?   @unique
  businessName  String    @unique
  password      String?
  address       String?
  longitude     Float
  latitude      Float
  rating        Float?    @default(0.0)
  imageUrls     String[]
  timing        Json?
  features      String[]
  isOpen        Boolean?  @default(true)
  isVerified    Boolean?  @default(false)
  description   String?
  phoneNumber   String?
  websiteUrl    String?
  documents     String[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
  city          String?
  country       String?
  streetaddress String?
  state         String?
  zipcode       String?
  category      String?
  reviews       Review[]
  keywords      Keyword[] @relation("BusinessKeywords")
  tags          Tag[]     @relation("BusinessTags")
  favoritedBy   User[]    @relation("UserFavorites")
  interactions  ViewInteraction[]
}

model Review {
  id         Int      @id @default(autoincrement())
  content    String
  rating     Int
  userId     Int
  businessId Int
  createdAt  DateTime @default(now())
  business   Business @relation(fields: [businessId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Keyword {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  businesses Business[] @relation("BusinessKeywords")
}

model Tag {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  businesses Business[] @relation("BusinessTags")
}

model ViewInteraction {
  id         Int      @id @default(autoincrement())
  date       DateTime
  views      Int
  businessId Int
  business   Business @relation(fields: [businessId], references: [id])

  @@unique([businessId, date]) // Composite unique constraint
}

model LocationSearch {
  id        Int       @id @default(autoincrement())
  roundedLat Float    // Latitude rounded to 1 decimal
  roundedLon Float    // Longitude rounded to 1 decimal
  count      Int      @default(0)              // Track search count
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([roundedLat, roundedLon]) // Ensure unique rounded coordinate combinations
}

model ItemSearch {
  id        Int       @id @default(autoincrement())
  item      String    @unique @db.VarChar(255) // Unique item
  count     Int       @default(0)              // Track search count
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
